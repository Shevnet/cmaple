"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var focusedClass = 'floatie--focused';
var activeClass = 'floatie--active';
var multilineClass = 'floatie--multiline';

var Floatie = function () {
  function Floatie(element) {
    _classCallCheck(this, Floatie);

    this.element = element;
    this.label = this.element.find('.floatie__label').first();
    this.input = this.element.find('.floatie__input').first();

    this._bindListeners();
    this._init();
  }

  _createClass(Floatie, [{
    key: '_bindListeners',
    value: function _bindListeners() {
      var _this = this;

      this.input.on('focus', function () {
        _this.element.addClass(focusedClass);
      });

      this.input.on('blur', function () {
        _this.element.removeClass(focusedClass);
      });

      var _arr = ['keyup', 'blur', 'change'];
      for (var _i = 0; _i < _arr.length; _i++) {
        var event = _arr[_i];
        this.input.on(event, function () {
          return _this._handleChange();
        });
      }
    }
  }, {
    key: '_init',
    value: function _init() {
      if (this.input.prop("tagName") === 'TEXTAREA') {
        this.element.addClass(multilineClass);
      }

      this._handleChange();
    }
  }, {
    key: '_handleChange',
    value: function _handleChange() {
      if (this.input.val() === '') {
        this.element.removeClass(activeClass);
      } else {
        this.element.addClass(activeClass);
      }
    }
  }]);

  return Floatie;
}();