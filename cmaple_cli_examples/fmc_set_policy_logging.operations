[vars]
# vars common to both the source and destination fmc
domain=Global
type=fmc
tree_name=set_logging_tree_1

# Path to the 'api-docs-fmcwithll.json' file
# CMAPLE bases most FMC operations on the current API model as defined in the file
# named ‘api-docs-fmcwithll.json’ and obtained from the target FMC. This file currently
# resides in the directory ‘/var/opt/CSCOpx/MDC/tomcat/vms/api/api-explorer/api’.
# This file provides the API model to CMAPLE:FMC which is used for many of the operations
# to derive urls, etc. This file can be copied from the target FMC using scp and placed
# in a directory of the users choice.
model_json_file=api-docs-fmcwithll.json

# vars specific to the source fmc
FMC_src_host=10.1.101.39
FMC_src_port=443
FMC_src_name=fmc_mig_src
FMC_src_user=@rest_admin_user
FMC_src_pass=@rest_admin_password

#RH – section to define and create the top level object for MAPLE (the “tree” object).  Note “tree” is arbitrary and can be “foo” or whatever.  It is just a label.
[tree]
#RH – sets the logging level for MAPLE.  Log file is maple.log in default directory
logging_level=INFO

#RH – Instantiates the top level MAPLE object and stores the object reference to “RUN tree”. Since maple_working_dir is preceded by an '@', it will be replaced with
#the value passed either on the command line or in the parameters file.
RUN tree=CMapleTree(name={vars$tree_name},tree_dir=@maple_working_dir,logging_level={tree$logging_level})

#RH – section to define and create the FMC leaf object for the MAPLE tree (the “leaf” object).  Note: 'leaf' is an arbitrary label.
[leaf]

#RH – creates a substitution variable to hold the arguments for creating the leaf object.  Not necessary, only for readability
leaf_args=leaf_type={vars$type},name={vars$FMC_src_name},json_file_path={vars$model_json_file},FMC_host={vars$FMC_src_host},FMC_port={vars$FMC_src_port},FMC_username={vars$FMC_src_user},FMC_password={vars$FMC_src_pass},FMC_domain={vars$domain},restore_responses=False

#RH – adds the leaf instance for the FMC to the tree
RUN leaf={tree$RUN tree}.add_leaf_instance({leaf$leaf_args})

#RH – gets the domain id for the given domain
RUN domain_id={leaf$RUN leaf}.get_domain_id(domain={vars$domain})

[get_source_policies]
#Discover the access policies
smart_ap_url = policy/accesspolicies/$..items[@.name is 'test_migration_policy_1'].id
RUN ap_id = {leaf$RUN leaf}.smart_get_object_id(url={get_source_policies$smart_ap_url})
RUN ar_dict = get_empty_dict()
RUN gar_list = {leaf$RUN leaf}.GET_API_path(url=policy/accesspolicies/{get_source_policies$RUN ap_id}/accessrules)
RUN id_list={leaf$RUN leaf}.query_json_field(query_field=items[@.type is 'AccessRule'].id,json_to_query={get_source_policies$RUN gar_list})
RUN ars = {leaf$RUN leaf}.query_with_list(query_url=policy/accesspolicies/{get_source_policies$RUN ap_id}/accessrules/~id~,query_list={get_source_policies$RUN id_list})
#RUN pp_id_list=output.pretty_print(_object={get_source_policies$RUN id_list})
RUN pp_gar_1=output.pretty_print(_object={get_source_policies$RUN ars})


#url=https://{vars$FMC_src_host}/api/fmc_config/v1/domain/{leaf$RUN domain_id}/policy/accesspolicies
##RUN accesspolicies={leaf$RUN leaf}.walk_API_path_gets(url=policy/accesspolicies)
#RUN accesspolicies={leaf$RUN leaf}.GET_API_path(url=policy/accesspolicies)
#RUN pp_pid=output.pretty_print(_object={get_source_policies$RUN accesspolicies})

